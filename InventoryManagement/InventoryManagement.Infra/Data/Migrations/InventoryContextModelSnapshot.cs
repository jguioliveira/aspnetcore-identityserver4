// <auto-generated />
using System;
using InventoryManagement.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryManagement.Infrastructure.Data.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("FatherCategoryId")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Inventory", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36);

                    b.Property<short>("Count")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime");

                    b.Property<byte>("MinCount")
                        .HasColumnType("tinyint");

                    b.HasKey("ProductId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ManufacturerId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.ProductBookMark", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("Count")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ProductId", "Code");

                    b.ToTable("ProductBookMarks");
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("InventoryManagement.Domain.Entities.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.Product", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Product_Manufacturer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("InventoryManagement.Domain.Entities.ProductBookMark", b =>
                {
                    b.HasOne("InventoryManagement.Domain.Entities.Product", "Product")
                        .WithMany("ProductBookMarks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductBookMarks_Product")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
